name: Build Windows (pyside6-deploy)
on: [push, workflow_dispatch]

jobs:
  build-win:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"   # 或 3.11，記得是 x64（預設即 x64）

      - name: Setup venv and install deps
        shell: cmd
        run: |
          python -m venv .venv
          call .venv\Scripts\activate
          python -m pip install --upgrade pip
          pip install --upgrade pyside6

      - name: Init deploy config (first time only)
        if: ${{ hashFiles('pysidedeploy.spec') == '' }}
        shell: cmd
        run: |
          call .venv\Scripts\activate
          pyside6-deploy --init main.py --force

      - name: Verify config exists
        shell: cmd
        run: |
          dir /b
          echo === spec ===
          type pysidedeploy.spec

      - name: Force backend=pyinstaller in spec
        shell: pwsh
        run: |
          $spec = Get-Content pysidedeploy.spec -Raw
          if ($spec -match '"backend"\s*:\s*"[^"]+"') {
            $spec = [Regex]::Replace($spec, '"backend"\s*:\s*"[^"]+"', '"backend": "pyinstaller"')
          } else {
            # insert backend right after the first '{'
            $spec = $spec -replace '{', '{"backend": "pyinstaller", '
          }
          Set-Content -Path pysidedeploy.spec -Value $spec
          Write-Host 'Updated backend to pyinstaller in pysidedeploy.spec'
          Get-Content pysidedeploy.spec

      - name: Build with pyside6-deploy
        shell: cmd
        run: |
          call .venv\Scripts\activate
          pyside6-deploy -c pysidedeploy.spec --force

      - name: List deploy output
        shell: cmd
        run: |
          echo === Listing possible output ===
          if exist pyside6_deploy (dir /s /b pyside6_deploy) else (echo pyside6_deploy not found)
          if exist dist (dir /s /b dist)
          where /R . *.exe

      - name: Locate build outputs
        id: finddist
        shell: pwsh
        run: |
          $candidates = @()
          $candidates += Get-ChildItem -Path . -Recurse -Directory -Filter dist -ErrorAction SilentlyContinue | Select-Object -ExpandProperty FullName
          $exes = Get-ChildItem -Path . -Recurse -Include *.exe -File -ErrorAction SilentlyContinue | Select-Object -ExpandProperty FullName
          if ($exes) {
            $exeDirs = $exes | ForEach-Object { Split-Path $_ -Parent } | Select-Object -Unique
            $candidates += $exeDirs
          }
          $candidates = $candidates | Select-Object -Unique
          if ($candidates.Count -gt 0) {
            $chosen = ($candidates | Where-Object { $_ -match 'pyside6_deploy' } | Select-Object -First 1)
            if (-not $chosen) { $chosen = $candidates[0] }
            "distPath=$chosen" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "Using output path: $chosen"
          } else {
            Write-Host "No dist or exe outputs found. Will rely on upload globs."
            "distPath=" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: AudioSocketClient-win
          if-no-files-found: warn
          path: |
            pyside6_deploy\**
            **\*.exe