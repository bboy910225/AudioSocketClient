name: Build Windows (PySide6-Deploy + PyInstaller)
on: [push, workflow_dispatch]

jobs:
  build-win:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"   # x64 by default

      - name: Setup venv and install deps
        shell: cmd
        run: |
          python -m venv .venv
          call .venv\Scripts\activate
          python -m pip install --upgrade pip
          pip install pyside6==6.7.2

      - name: Show versions
        shell: cmd
        run: |
          call .venv\Scripts\activate
          python -V
          pyside6-deploy --version

      - name: Init deploy config (first time only)
        if: ${{ hashFiles('pysidedeploy.spec') == '' }}
        shell: cmd
        run: |
          call .venv\Scripts\activate
          pyside6-deploy --init main.py --force

      - name: Force backend=pyinstaller and add PyInstaller args in spec
        shell: pwsh
        run: |
          $spec = Get-Content pysidedeploy.spec -Raw
          # Ensure backend: pyinstaller
          if ($spec -match '"backend"\s*:\s*"[^"]+"') {
            $spec = [Regex]::Replace($spec, '"backend"\s*:\s*"[^"]+"', '"backend": "pyinstaller"')
          } else {
            $spec = $spec -replace '{', '{"backend": "pyinstaller", '
          }
          # Ensure mode: standalone
          if ($spec -notmatch '"mode"\s*:\s*"standalone"') {
            if ($spec -match '"mode"\s*:\s*"[^"]+"') {
              $spec = [Regex]::Replace($spec, '"mode"\s*:\s*"[^"]+"', '"mode": "standalone"')
            } else {
              $spec = $spec -replace '{', '{"mode": "standalone", '
            }
          }
          # Ensure extra PyInstaller args: collect-all PySide6, windowed, icon
          if ($spec -match '"extra_args"\s*:\s*{') {
            if ($spec -match '"pyinstaller"\s*:\s*\[') {
              # append if not present
              if ($spec -notmatch '--collect-all"\s*,\s*"PySide6') {
                $spec = $spec -replace '("pyinstaller"\s*:\s*\[)', '$1 "--collect-all", "PySide6", '
              }
              if ($spec -notmatch '"--windowed"') { $spec = $spec -replace '("pyinstaller"\s*:\s*\[)', '$1 "--windowed", ' }
              if ($spec -notmatch '"--noconfirm"') { $spec = $spec -replace '("pyinstaller"\s*:\s*\[)', '$1 "--noconfirm", ' }
              if ($spec -notmatch '"--icon"') { $spec = $spec -replace '("pyinstaller"\s*:\s*\[)', '$1 "--icon", "icon.ico", ' }
            } else {
              $spec = $spec -replace '("extra_args"\s*:\s*{)', '$1 "pyinstaller": ["--windowed", "--noconfirm", "--collect-all", "PySide6", "--icon", "icon.ico" ], '
            }
          } else {
            $spec = $spec -replace '{', '{"extra_args": { "pyinstaller": ["--windowed", "--noconfirm", "--collect-all", "PySide6", "--icon", "icon.ico" ] }, '
          }
          Set-Content -Path pysidedeploy.spec -Value $spec
          Write-Host '--- pysidedeploy.spec ---'
          Get-Content pysidedeploy.spec

      - name: Build with pyside6-deploy (PyInstaller backend)
        shell: cmd
        run: |
          call .venv\Scripts\activate
          pyside6-deploy -c pysidedeploy.spec --force

      - name: List outputs
        shell: cmd
        run: |
          echo === pyside6_deploy ===
          if exist pyside6_deploy (dir /s /b pyside6_deploy) else (echo pyside6_deploy not found)
          echo === dist (fallback) ===
          if exist dist (dir /s /b dist)
          where /R . *.exe || echo no exe found

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: AudioSocketClient-win
          if-no-files-found: warn
          path: |
            pyside6_deploy\**
            **\dist\**
            **\*.exe